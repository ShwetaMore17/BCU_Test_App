@page "/courses"
@using BCU.Contoso.Timetable.Entities.Api.Requests
@using BCU.Contoso.Timetable.Entities.Api.Responses
@using BCU.Contoso.Timetable.Web.Apis
@rendermode InteractiveServer

@inject ITimetableApi CourseApi

<PageTitle>Courses</PageTitle>

<MudText Typo="Typo.h3">Courses</MudText>

<MudSpacer />

<MudText Typo="Typo.body1">This screen shows all courses with timetables.</MudText>

<MudSpacer />

<MudDataGrid T="GetCoursesResult" ServerData="ServerReload" Hover="true" @ref="table" SortMode="SortMode.Single" aria-hidden="True">
    <Columns>
        <PropertyColumn Property="s => s.StartDate" Title="Start" Sortable="false"></PropertyColumn>
        <PropertyColumn Property="s => s.Name" Title="Name" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="s => s.Code" Title="Code" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="s => s.Description" Title="Description" Sortable="false"></PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudLink Href="@($"/course/{context.Item.Id}")">View</MudLink>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager T="GetCoursesResult" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<GetCoursesResult>? table;

    public async Task<GridData<GetCoursesResult>> ServerReload(GridState<GetCoursesResult> state)
    {
        var sortBy = CourseSortEnum.None;

        var sortState = state.SortDefinitions.FirstOrDefault();

        if (sortState != null)
        {
            switch (sortState.SortBy.ToLower())
            {
                case "code":
                    sortBy = sortState.Descending ? CourseSortEnum.CodeDescending : CourseSortEnum.CodeAscending;
                    break;
                case "name":
                    sortBy = sortState.Descending ? CourseSortEnum.NameDescending : CourseSortEnum.NameAscending;
                    break;
            }
        }

        var courses = await CourseApi.GetCourses(state.Page, sortBy, CancellationToken.None);

        return new GridData<GetCoursesResult> { TotalItems = courses.TotalItems, Items = courses.Items };
    }
}
